#!/usr/local/bin/perl
# Copyright (c) 2000-2006 ActiveState Software Inc.
# See the file LICENSE.txt for licensing information.

use Cwd;

Import(
    "cons",
    "buildFlavour",
    "supportDir",
    "sysdllsDir",
    "platform",
    "architecture",
    "buildType",
    "komodoDevDir",
    "mozBin",
    "productType",
    "version",
    "komodoPythonUtilsDir",
    "ranRegxpcomStateFileName",
    "komodoPythonUtilsDir",
    "withDebugging",
);

my $EXE, $PYD;
if ($platform eq "win") {
    $EXE = ".exe";
    $PYD = ".pyd";
} else {
    $EXE = "";
    $PYD = ".so";
}


sub getPrebuiltDirectory {
    my $endpath = shift;
    my $myBuildType = shift || $buildType;
    if ($platform eq 'win') {
        return cwd()."/prebuilt/win/$myBuildType/$endpath";
    }
    if ($platform eq 'darwin') {
        return cwd()."/prebuilt/macosx/$myBuildType/$endpath";
    }
    if (-e cwd()."/prebuilt/$platform-$architecture/$myBuildType/$endpath") {
        return cwd()."/prebuilt/$platform-$architecture/$myBuildType/$endpath";
    }
    return cwd()."/prebuilt/$platform/$myBuildType/$endpath";
}

my $sourcedir;

if ($withDebugging) {
    # PHP prebuilt stuff: the xdebug debugging extensions.
    my $xdebugArchDir;
    if ($platform eq "win") {
        $xdebugArchDir = "win32-x86";
    } elsif ($platform eq "darwin") {
        $xdebugArchDir = "macosx";   # xdebug builds are universal
    } else {
        $xdebugArchDir = "$platform-$architecture";
    }
    $cons->InstallRecursive("$supportDir/php/debugging", 
        cwd()."/prebuilt/xdebug/$xdebugArchDir", ('\.svn'));


    # Ruby debugging binaries are all now prebuilt
    my $targets;
    my $ext;
    my $progDirs = ['1.8', '1.9', '2.0'];
    my $binaryDirs = ['1.8.6', '1.8.7', '1.9.1', '1.9.2', '1.9.3', '2.0.0'];
    if ($platform eq "win") {
        $targets = [["win32-x86", "x86"], ["win32-x86_64", "x86_64"]];
        $ext = ".so";
    } elsif ($platform eq "darwin") {
        $targets = [["macosx", "x86"], ["macosx-x86_64", "x86_64"]];
        $ext = ".bundle";
    } else {
        $targets = [["linux-x86", "x86"], ["linux-x86_64", "x86_64"]];
        $ext = ".so";
    }
    my $destDir = "$supportDir/dbgp/rubylib";
    $sourcedir = cwd() . "/prebuilt/ruby";
    foreach my $ver (@$progDirs) {
        for my $srcFile (glob("$sourcedir/all/$ver/*.rb")) {
            $cons->Install("$destDir/$ver", $srcFile);
        }
    }
    foreach my $ver (@$binaryDirs) {
        for my $target (@$targets) {
            my ($plat, $arch) = @$target;
            for my $srcFile (glob("$sourcedir/$plat/$ver/*$ext")) {
                $cons->Install("$destDir/$ver/$arch", $srcFile);
            }
        }
    }
    
    # Tcl prebuilt stuff (the debugger, linter, and CILE)
    # Support files needed by dbgp_tcldebug.
    $sourcedir = getPrebuiltDirectory("tcl/dbgp_tcldebug$EXE");
    if (-e $sourcedir) {
        $cons->Install("$supportDir/tcl", $sourcedir);
    } else {
        print "XXX WARNING $sourcedir does not exist\n";
    }
    
    if ($platform eq "win") {
        my $sourcedir = cwd() . "/prebuilt/win32-x86_64/$buildType/tcl";
        $cons->Install("$supportDir/tcl", "$sourcedir/dbgp_tcldebug-x86_64.exe");
        # There's a kotcllint-x86_64.exe, but the 32-bit 
        # kotcllint.exe will work on 64-bit Windows systems, as it doesn't
        # plug into a 64-bit exe
    }
    

    $sourcedir = cwd()."/prebuilt/all/tcl";
    if (-e $sourcedir) {
        $cons->InstallRecursive("$supportDir/tcl", $sourcedir, ("\.consign", '\.svn'));
    } else {
        print "XXX WARNING $sourcedir does not exist\n";
    }

    ##xsltdbgp dependencies
    $sourcedir = getPrebuiltDirectory("xslt");
    if (-e $sourcedir) {
        $cons->InstallRecursive("$supportDir/xslt", $sourcedir, ('\.svn'));
    } else {
        print "XXX WARNING $sourcedir does not exist\n";
    }
}

$sourcedir = getPrebuiltDirectory("tcl/kotcllint$EXE");
if (-e $sourcedir) {
    $cons->Install("$supportDir/tcl", $sourcedir);
} else {
    print "XXX WARNING $sourcedir does not exist\n";
}




# Hack default user-skins.rdf (see bug 23047).
# - This is only really required on Linux and, besides, it breaks the
#   Windows build with this:
#       cons.pl: error in file "prebuilt\Conscript" (cons.pl: attempt to build install\release\user_withmoz\INSTALLDIR\Mozilla\chrome\user-skins.rdf twice, in different ways!)
# XXX Trent to see if necessary on darwin
if ($platform ne "win" && $platform ne "darwin") {
    $cons->Install("$mozBin/chrome", "all/chrome/user-skins.rdf");
}


# Install Mac OS X color picker binary.
if ($platform eq "darwin") {
    $sourcedir = getPrebuiltDirectory("colorpicker/osx_colorpicker");
    $cons->Install("$supportDir/colorpicker", $sourcedir);
}

/* Copyright (c) 2000-2006 ActiveState Software Inc.
   See the file LICENSE.txt for licensing information. */

// ISciMoz.idl
// Interface to the Scintilla Mozilla plugin.
// Author: Neil Hodgson

// *************** This is *NOT* a valid IDL file. *****************
// It is a template from which a valid IDL file is generated.
// *****************************************************************

#include "nsISupports.idl"
#include "nsIDOMEvent.idl"

interface ISciMozEvents;
interface nsIVariant; // Needed for generated code
// An interface purely to get around a 128 vtable limitation
// on some parts of xpcom.
// This is pretty much all methods available in C++ (or python) due to the split
// interfaces.  See Mozilla bug 54471
// If you need some other calls, add them in XPFacer.py, in the liteFeatures list.
// There is a maximum number of entries we'll be able to use here until the Moz
// bug is fixed.
[scriptable, uuid(5f8641d6-def9-4236-a77d-63b46fb34386)]
interface ISciMozLite : nsISupports {
	// Margin constants.
	const long MARGIN_SYMBOLS = 0; // Bookmarks, breakpoints...
	const long MARGIN_LINENUMBERS = 1;
	const long MARGIN_TRACKING = 2;
	const long MARGIN_FOLDING = 3;
	//const long MARGIN_UNUSED = 4;

	void updateMarginWidths();

	// Manually created features
	attribute DOMString name; // a "name" for debugging/diagnostic purposes.
	void hookEvents(in ISciMozEvents eventListener, [optional] in long mask);
	void unhookEvents(in ISciMozEvents eventListener);
	// this one is more of a hack to avoid exposing the
	// non-scriptable nsIDOMWindow to Python!
	void sendUpdateCommands(in string commandset);
	void getStyledText(in long min, in long max, out unsigned long count, 
		[array, size_is(count), retval] out octet str);
	void getStyleRange(in long min, in long max, [optional] out unsigned long count,
			   [array, size_is(count), retval] out unsigned short styles);
	long getCurLine(out AString text);
	void assignCmdKey(in long key, in long modifiers, in long msg);
	void clearCmdKey(in long key, in long modifiers);

	/**
	 * Get the text in the specified range
	 * The parameters are byte positions
	 */
	AString getTextRange(in long min, in long max);
	attribute AString text;
	/**
	 * textId is a number that is incremented whenever the Scintilla text is
	 * modified. This is so the JavaScript SciMoz wrapper can keep a cached
	 * copy of the text without having to go through XPCOM and Scintilla
	 * each time.
	 */
	readonly attribute int32_t textId;
	readonly attribute AString selText;
	
	// stuff to minimize some of our eventist usage
	void doBraceMatch();
	
	// Plugin visibility hack used on Cocoa platform.
	void enablePluginVisibilityHack();

        // utility function to save every man and his dog from doing the int->char conversion.
        wchar getWCharAt(in long pos);
        // Indicates if Scintilla is currently "owned" by the plugin instance.
        // ie, if it is "visible".  However, "visible" is too overloaded (ie, could
        // mean simply scrolled out of view, so went for this!
        readonly attribute boolean isOwned;
        
        // computes the char position for the current byte position
        // if position < 0 then the currentPos is used
        long charPosAtPosition(in long position);
        
        // Is the underlying Window visible?  (To prevent paint flicker as we
        // init the control, MSWindows creates the Windows invisible, and never
        // automatically sets it to visible - this property *must* be set.)
        attribute boolean visible;
    
        attribute boolean isFocused;

        // Mark the instance as closed, no communications should travel to/from
	// the scimoz instance after this point.
        void markClosed();

        void addChar(in uint32_t ch);
        long getLine(in long line, out AUTF8String text);
	
        // Needed on linux because of the way Mozilla works...
        // We do a grab_add on mousedown, but if you start dragging after that,
        // the widget never receives a mouseup and thus we never do a
        // grab_remove.. here is our chance.
        void endDrop();

	// Remove the annotation text at the given line
	void annotationRemoveAtLine(in long line);

	// used to prevent context menu's on the scrollbars while scrollbar
	// tracking is occuring
	readonly attribute boolean isTracking;
        // used on OSX to see if scintilla initiated a drag session
        readonly attribute boolean inDragSession;

	// Read-write wrapper for SCI_SETWORDCHARS
	attribute AUTF8String wordChars;
	// Backwards-compatibility alias for ISciMozLite.wordChars = "xxx";
	// (It used to be ISciMozLite.setWordChars("xxx"); )
	[deprecated, binaryname(SetWordChars_backCompat)]
	void setWordChars(in AUTF8String characters);

	// Override method to perform custom binary character decoding.
	void markerDefineRGBAImage(in long markerNumber, in AString pixels);

//++Autogenerated
// BEGIN GENERATED SECTION - ISciMoz.idl - "lite" interface
// All code in this section has been automatically generated.
// DO NOT EDIT THIS SECTION

__ISCIMOZ_LITE_INTERFACE__

// END GENERATED SECTION.
//--Autogenerated

};

//++Autogenerated
// BEGIN GENERATED SECTION - ISciMoz.idl - "standard" interfaces
// All code in this section has been automatically generated.
// DO NOT EDIT THIS SECTION

__ISCIMOZ_INTERFACE__

// END GENERATED SECTION.
//--Autogenerated

[scriptable, uuid(1ef5ac2f-6b7b-4266-a214-cf9875f4184e)]
interface ISciMoz : ISciMozLite {
	// Manually created features go in the "lite" version - hopefully
	// will never be 128 total there!

	// Other functions required due to our special event processing.
	void buttonDown(in long x,
			in long y,
			in uint16_t button,
			in boolean bShift,
			in boolean bCtrl,
			in boolean bAlt);
	void buttonUp(in long x,
		      in long y,
		      in uint16_t button,
		      in boolean bShift,
		      in boolean bCtrl,
		      in boolean bAlt);
	void buttonMove(in long x, in long y);

	// constants go here, because they don't take up any space in the xpt
	// stub it's safe to have them all (and makes it easier to find the
	// constants)
__ISCIMOZ_INTERFACE_CONSTS__
};
